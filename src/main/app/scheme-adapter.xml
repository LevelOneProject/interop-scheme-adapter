<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:metrics="http://www.mulesoft.org/schema/mule/metrics" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
http://www.mulesoft.org/schema/mule/metrics http://www.mulesoft.org/schema/mule/metrics/current/mule-metrics.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<http:request-config name="ilp-service-http-config" host="${ilp-host}" port="${ilp-service.port}"
		doc:name="ILP-Service HTTP Request Configuration" responseTimeout="30000" />
	<http:request-config name="dfsp-api-http-config" host="${dfsp-host}" port="${dfsp-api.port}"
		doc:name="DFSP API Config" responseTimeout="30000" />

	<!-- <spring:beans> <spring:bean id="sideCarClient" class="com.l1p.interop.scheme.adapter.SideCarClient"> 
		<spring:constructor-arg value="${sidecar-server.host}" /> <spring:constructor-arg value="${sidecar-server.port}" 
		/> </spring:bean> </spring:beans> -->

	<spring:beans>
		<spring:import resource="classpath:services-common.xml" />
		<spring:import resource="classpath:metrics.xml" />
	</spring:beans>

	<spring:beans>
		<spring:bean id="ExceptionTransformer" name="ExceptionTransformer" class="com.l1p.interop.L1PExceptionTransformer"/>
	</spring:beans>

	<sub-flow name="common_Flow">
		<!-- <custom-transformer class="com.l1p.interop.ilp.ledger.BasicAuthCredentialsTransformer" doc:name="Basic Auth Transformer"/> -->
		<logger level="INFO"
				message="Received request with L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id'] at path=#[message.inboundProperties.'http.request.path'], method=#[message.inboundProperties.'http.method'], Content-Type=#[message.inboundProperties.'Content-Type']"
				category="com.l1p.interop.ilp.ledger.api-main" doc:name="logger"/>
		<object-to-string-transformer doc:name="Object to String"/>
		<set-session-variable variableName="L1p-Trace-Id" value="#[(message.inboundProperties.'L1p-Trace-Id' == null) ? java.util.UUID.randomUUID() : message.inboundProperties.'L1p-Trace-Id']" doc:name="set-L1p-Trace-Id"/>
	</sub-flow>

	<flow name="get:/health:scheme-adapter-config">
		<http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/health" allowedMethods="GET" doc:name="HTTP"/>
		<flow-ref name="common_Flow" doc:name="common_Flow"/>
		<set-payload value="{ &#xA;  &quot;status&quot; : &quot;ok&quot; &#xA;}" doc:name="Set Payload" />
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<flow name="get:/receivers/{ID}:scheme-adapter-config">
		<http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/receivers/{ID}" allowedMethods="GET" doc:name="HTTP"/>
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.mule-receivers-id.start" doc:name="SnapTime"/>
		<flow-ref name="common_Flow" doc:name="common_Flow"/>
		<set-session-variable variableName="payee"
			value="#[message.inboundProperties.'http.uri.params'.ID]" doc:name="save-uri-parameter" />
		<logger level="INFO"
			message="Processing request for GET on http://${dfsp-host}:${dfsp-api.port}/receivers/#[sessionVars.payee], L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id'], payee=#[sessionVars.payee]"
			category="com.l1p.interop.scheme.adapter.fetch-payee" doc:name="logger" />
		<set-property propertyName="L1p-Trace-Id" value="#[sessionVars.'L1p-Trace-Id']"
			doc:name="PropertyHttpL1p-Trace-Id" />
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.dfsp-receivers-id.start" doc:name="SnapTime"/>
		<http:request config-ref="dfsp-api-http-config" path="/receivers/#[sessionVars.payee]"
			method="GET" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="Authorization" value="#['Basic ']${dfsp-api.auth_value}" />
			</http:request-builder>
			<http:success-status-code-validator values="200,400" />
		</http:request>
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.dfsp-receivers-id.stop" doc:name="SnapTime"/>
		<metrics:time config-ref="metricsConfig" beginSnapKey="get.dfsp-receivers-id.start" endSnapKey="get.dfsp-receivers-id.stop" category="l1p.scheme-adapter.dfsp-receivers-id.api" metricKey="DFSPGetReceivers" doc:name="Metrics Record"/>
		<object-to-string-transformer doc:name="Object to String" />
		<choice doc:name="Update Account URL if valid">
			<when expression="#[message.inboundProperties.'http.status' == 200]">
				<transformer ref="actualLedgerToLedgerAdapterUrlTransformer" doc:name="Transform Ledger URL" />
				<!-- <expression-transformer doc:name="Replace dfsp port with scheme adapter port" expression="#[payload.replaceAll(&quot;8014&quot;,&quot;8088&quot;).replaceAll(&quot;ledger&quot;,&quot;ilp/ledger/v1&quot;)]"/> -->
			</when>
			<otherwise>
				<logger message="Failed to get account #[payload]" level="ERROR"
					category="com.l1p.interop.scheme.adapter.fetch-payee" doc:name="Logger" />
			</otherwise>
		</choice>
		<json:object-to-json-transformer doc:name="Object to JSON" />
		<logger level="INFO"
			message="Processing complete for get:/receivers/{payee}, L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id'], payee=#[sessionVars.payee]"
			category="com.l1p.interop.scheme.adapter.fetch-payee" doc:name="logger" />
		<set-property propertyName="http.status" value="#[message.inboundProperties.'http.status']"
			doc:name="Property" />
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.mule-receivers-id.stop" doc:name="SnapTime"/>
		<metrics:time config-ref="metricsConfig" beginSnapKey="get.mule-receivers-id.start" endSnapKey="get.mule-receivers-id.stop" category="l1p.scheme-adapter.receivers-id.api" metricKey="MuleGetReceivers" doc:name="Metrics Record"/>

		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<flow name="post:/quotes:application/json:scheme-adapter-config">
		<http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/quotes" allowedMethods="POST" doc:name="HTTP"/>
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.mule-quotes.start" doc:name="SnapTime"/>
		<flow-ref name="common_Flow" doc:name="common_Flow"/>
		<json:json-to-object-transformer returnClass="java.util.Map"
			doc:name="Convert JSON Payload to Map" />
		<choice doc:name="Check for amountType SEND/RECEIVE">
			<when expression="#[payload.amountType == 'RECEIVE']">
				<choice doc:name="Check for initiator PAYER/PROXY">
					<when expression="#[message.inboundProperties.'initiator'== null]">
						<set-session-variable variableName="payeeUrl" value="#[payload.payee.url]"
							doc:name="Save Input Receiver URL" />
						<json:object-to-json-transformer doc:name="Object to JSON" />
						<set-property propertyName="initiator" value="PROXY" doc:name="Property"/>
						<logger level="INFO"
							message="Posting request to payee scheme-adapter /quotes to http://#[sessionVars.payeeUrl]/quotes, method=POST, Payload: #[payload]"
							category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
						<metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.mule-payee-scheme-adapter-quotes.start" doc:name="SnapTime"/>
						<outbound-endpoint address="http://#[sessionVars.payeeUrl]/quotes"
							exchange-pattern="request-response" doc:name="Call scheme-adapter /quotes" />
						<metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.mule-payee-scheme-adapter-quotes.stop" doc:name="SnapTime"/>
						<metrics:time config-ref="metricsConfig" beginSnapKey="post.mule-payee-scheme-adapter-quotes.start" endSnapKey="post.mule-payee-scheme-adapter-quotes.stop" category="l1p.scheme-adapter.quotes.api" metricKey="MulePayeeSchemeAdapterPostQuote" doc:name="Metrics Record"/>
						<choice doc:name="check if scheme-adapter /quotes is successful">
							<when expression="#[message.inboundProperties.'http.status' == 200]">
								<logger level="INFO"
									message="payer scheme-adapter success /quotes response: #[message.payloadAs(java.lang.String)]"
									category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
								<json:json-to-object-transformer returnClass="java.util.Map"
									doc:name="Convert JSON Payload to Map" />
								<set-session-variable variableName="finalResponseMap" value="#[payload]"
									doc:name="Save Final Response as a map" />
								<!-- Section for calling quoteIPR -->
								<logger level="INFO"
									message="Posting request to ilp-service /quoteIPR to http://${ilp-host}:${ilp-service.port}/quoteIPR?ipr=#[payload.ipr], method=GET"
									category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
                                <metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.ilp-service-quoteIPR.start" doc:name="SnapTime"/>
                                <http:request config-ref="ilp-service-http-config" path="/quoteIPR" method="GET"
									doc:name="Call ilp-service /quoteIPR">
									<http:request-builder>
										<http:query-param paramName="ipr" value="#[payload.ipr]" />
									</http:request-builder>
									<http:success-status-code-validator values="200..599" />
								</http:request>
                                <metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.ilp-service-quoteIPR.stop" doc:name="SnapTime"/>
                                <metrics:time config-ref="metricsConfig" beginSnapKey="get.ilp-service-quoteIPR.start" endSnapKey="get.ilp-service-quoteIPR.stop" category="l1p.scheme-adapter.quotes.api" metricKey="ILPServiceQuoteIPR" doc:name="Metrics Record"/>
                                <choice doc:name="check if ilp-service /quoteIPR is successful">
									<when expression="#[message.inboundProperties.'http.status' == 200]">
										<logger level="INFO"
											message="Success response from ilp-service /quoteIPR: #[message.payloadAs(java.lang.String)]"
											category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
										<json:json-to-object-transformer doc:name="Convert ILP-Service quoteIPR response to Map"
											returnClass="java.util.HashMap" />
										<expression-transformer
											expression="#[Map receiveAmountMap = new java.util.HashMap(); receiveAmountMap.put(&quot;amount&quot;,payload.sourceAmount); receiveAmountMap.put(&quot;currency&quot;,&quot;USD&quot;);   sessionVars.finalResponseMap.put(&quot;receiveAmount&quot;,receiveAmountMap); sessionVars.finalResponseMap.put(&quot;sourceExpiryDuration&quot;,payload.sourceExpiryDuration); sessionVars.finalResponseMap]"
											doc:name="Update dfsp response with quoteIPR response" />
										<json:object-to-json-transformer doc:name="Object to JSON" />
										<logger level="INFO"
											message="Successfully completed processing for L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id']. Response: #[payload]"
											category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
									</when>
									<otherwise>
										<logger level="INFO"
											message="Failure response from ilp-service /quoteIPR: #[message.payloadAs(java.lang.String)]"
											category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<logger level="INFO"
									message="Failure response from Payer Scheme adapter /quotes: #[message.payloadAs(java.lang.String)]"
									category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
							</otherwise>
						</choice>
					</when>
					<when expression="#[message.inboundProperties.'initiator'== 'PROXY']">
                        <metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.mule-quotes.start" doc:name="SnapTime"/>
                        <flow-ref name="dfsp_quote-and-ilpservice_createIPR" doc:name="dfsp_quote-and-ilpservice_createIPR" />
                        <metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.mule-quotes.stop" doc:name="SnapTime"/>
                        <metrics:time config-ref="metricsConfig" beginSnapKey="post.mule-quotes.start" endSnapKey="post.mule-quotes.stop" category="l1p.scheme-adapter.quotes.api" metricKey="MulePostQuote" doc:name="Metrics Record"/>
                    </when>
					<otherwise>
						<logger level="INFO" message="Initiator should either be PAYER/PROXY" category="com.l1p.interop.scheme.adapter.quote"
							doc:name="logger" />
					</otherwise>
				</choice>
			</when>
			<when expression="#[payload.amountType == 'SEND']">
				<choice doc:name="Check for initiator PAYER/PROXY">
					<when expression="#[message.inboundProperties.'initiator'== null]">
						<json:json-to-object-transformer doc:name="Convert payload to Map"
							returnClass="java.util.HashMap" />
						<set-session-variable variableName="originalQuoteRequestMap" value="#[payload]"
							doc:name="Save Original Request as a map" />
						<!-- Call GET /ilpAddress on Scheme Adapter on Payee side -->
						<set-session-variable variableName="payeeUrl" value="#[payload.payee.url]"
							doc:name="Save Input Receiver URL" />
						<set-session-variable variableName="inputAmount" value="#[payload.amount.amount]"
							doc:name="Save Input Amount" />
						<set-session-variable variableName="payeeLedgerAccount" value="#[payload.payee.account]"
							doc:name="Save Payee ledger account" />
						<json:object-to-json-transformer doc:name="Object to JSON" />
						<logger level="INFO"
							message="Posting request to scheme-adapter /ilpAddress to http://#[sessionVars.payeeUrl]/ilpAddress?account=#[sessionVars.payeeLedgerAccount], method=GET"
							category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
                        <metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.ilp-service-getILPAddress.start" doc:name="SnapTime"/>
                        <http:outbound-endpoint
							address="http://#[sessionVars.payeeUrl]/ilpAddress?account=#[sessionVars.payeeLedgerAccount]"
							method="GET" exchange-pattern="request-response" doc:name="Generic" />
                        <metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.ilp-service-getILPAddress.stop" doc:name="SnapTime"/>
                        <metrics:time config-ref="metricsConfig" beginSnapKey="get.ilp-service-getILPAddress.start" endSnapKey="get.ilp-service-getILPAddress.stop" category="l1p.scheme-adapter.quotes.api" metricKey="ILPServiceGetILPAddress" doc:name="Metrics Record"/>
                        <choice doc:name="Check if ilp-service if /ilpAddress is successful">
							<when expression="#[message.inboundProperties.'http.status' == 200]">
								<logger level="INFO"
									message="Success response from Scheme adapter /ilpAddress: #[message.payloadAs(java.lang.String)]"
									category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
								<json:json-to-object-transformer doc:name="Convert ILP-Service Response to Map"
									returnClass="java.util.HashMap" />
								<set-session-variable variableName="ilpAddress" value="#[payload.address]"
									doc:name="Save ilpAddress" />
								<!-- Call /quoteSourceAmount on ILP Service -->
								<logger level="INFO"
									message="Posting request to ilp-service to http://${ilp-host}:${ilp-service.port}/quoteSourceAmount, method=GET with query parameters: destinationAddress:#[sessionVars.ilpAddress] sourceAmount:#[sessionVars.originalQuoteRequestMap.amount.amount] connectorAccount:#[sessionVars.payeeLedgerAccount] destinationScale:1"
									category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
                                <metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.ilp-service-quoteSourceAmount.start" doc:name="SnapTime"/>
                                <http:request config-ref="ilp-service-http-config" path="/quoteSourceAmount"
									method="GET" doc:name="Call ilp-service /quoteSourceAmount">
									<http:request-builder>
										<http:query-param paramName="destinationAddress" value="#[sessionVars.ilpAddress]" />
										<http:query-param paramName="sourceAmount"
											value="#[sessionVars.originalQuoteRequestMap.amount.amount]" />
										<http:query-param paramName="connectorAccount" value="#[sessionVars.payeeLedgerAccount]" />
										<http:query-param paramName="destinationScale" value="1" />
									</http:request-builder>
									<http:success-status-code-validator values="200..599" />
								</http:request>
                                <metrics:snap-time config-ref="metricsConfig" snapTimeKey="get.ilp-service-quoteSourceAmount.stop" doc:name="SnapTime"/>
                                <metrics:time config-ref="metricsConfig" beginSnapKey="get.ilp-service-quoteSourceAmount.start" endSnapKey="get.ilp-service-quoteSourceAmount.stop" category="l1p.scheme-adapter.quotes.api" metricKey="ILPServiceGetQuoteSourceAmount" doc:name="Metrics Record"/>
                                <choice doc:name="Check if ilp-service if /quoteSourceAmount is successful">
									<when expression="#[message.inboundProperties.'http.status' == 200]">
										<logger level="INFO"
											message="Success response from ilp-service /quoteSourceAmount: #[message.payloadAs(java.lang.String)]"
											category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
										<json:json-to-object-transformer doc:name="Convert ILP-Service /quoteSourceAmount Response to Map"
											returnClass="java.util.HashMap" />
										<set-session-variable variableName="destinationAmount" value="#[payload.destinationAmount]"
											doc:name="Save destination amount" />
										<set-session-variable variableName="sourceExpiryDuration" value="#[payload.sourceExpiryDuration]"
											doc:name="Save sourceExpiryDuration" />
										<!-- Call /quotes on scheme adapter on Payee side -->
										<expression-transformer
											expression="#[sessionVars.originalQuoteRequestMap.get(&quot;amount&quot;).put(&quot;amount&quot;,sessionVars.destinationAmount);  sessionVars.originalQuoteRequestMap]"
											doc:name="Update dfsp request with destination amount from ilp-service /quoteSourceAmount" />
										<json:object-to-json-transformer doc:name="Object to JSON" />
										<set-property propertyName="initiator" value="PROXY" doc:name="Property"/>
										<logger level="INFO"
											message="Posting request to scheme-adapter /quotes http://#[sessionVars.payeeUrl]/quotes, method=POST Payload: #[payload]"
											category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
										<http:outbound-endpoint address="http://#[sessionVars.payeeUrl]/quotes"
											method="POST" exchange-pattern="request-response" doc:name="Generic" />
										<logger level="INFO"
											message="In Payer: Response from Payee scheme-adapter /quotes: #[message.payloadAs(java.lang.String)]"
											category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
										<json:json-to-object-transformer doc:name="Convert ILP-Service Response to Map"
											returnClass="java.util.HashMap" />
										<!-- <set-session-variable variableName="receiveAmount" value="#[String.valueOf(Integer.parseInt(sessionVars.inputAmount)-Integer.parseInt(payload.payeeFee.amount)-Integer.parseInt(payload.payeeCommission.amount))]" 
											doc:name="Calculate reeiveAmount that scheme-adapter needs to send to Payer dfsp" /> -->
										<set-session-variable variableName="receiveAmount"
											value="#[String.valueOf(Integer.parseInt(sessionVars.inputAmount))]" doc:name="Calculate reeiveAmount that scheme-adapter needs to send to Payer dfsp" />
										<expression-transformer
											expression="#[Map receiveAmountMap = new java.util.HashMap(); receiveAmountMap.put(&quot;amount&quot;,sessionVars.receiveAmount); receiveAmountMap.put(&quot;currency&quot;,&quot;USD&quot;);   payload.put(&quot;receiveAmount&quot;,receiveAmountMap); payload]"
											doc:name="Update dfsp response with quoteIPR response" />
										<json:object-to-json-transformer doc:name="Object to JSON" />
									</when>
									<otherwise>
										<logger level="INFO"
											message="In Payer: Failure response from ilp-service /quoteSourceAmount: #[message.payloadAs(java.lang.String)]"
											category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<logger level="INFO"
									message="Failure Response from scheme-adapter /ilpAddress: #[message.payloadAs(java.lang.String)]"
									category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
							</otherwise>
						</choice>
					</when>
					<when expression="#[message.inboundProperties.'initiator'== 'PROXY']">
						<flow-ref name="dfsp_quote-and-ilpservice_createIPR" doc:name="Flow Reference" />
					</when>
				</choice>
			</when>
			<otherwise>
				<logger level="INFO" message="Handle Default portion" category="com.l1p.interop.scheme.adapter.quote"
					doc:name="logger" />
			</otherwise>
		</choice>
		<!-- <set-payload value="#[payload]" doc:name="Set Payload"/> <set-property propertyName="http.status" 
			value="#[message.inboundProperties.'http.status']" doc:name="Property" /> -->
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.mule-quotes.stop" doc:name="SnapTime"/>
        <metrics:time config-ref="metricsConfig" beginSnapKey="post.mule-quotes.start" endSnapKey="post.mule-quotes.stop" category="l1p.scheme-adapter.quotes.api" metricKey="MulePostQuote" doc:name="Metrics Record"/>
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<flow name="put:/payments:application/json:scheme-adapter-config">
		<http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/payments" allowedMethods="PUT" doc:name="HTTP"/>
		<flow-ref name="common_Flow" doc:name="common_Flow"/>
		<transformer ref="actualLedgerToLedgerAdapterUrlTransformer" doc:name="Transform Ledger URL"/>
        <logger level="INFO"
			message="Sending request to ilp-service/payIPR at http://${ilp-host}:${ilp-service.port}/payIPR  Payload: #[payload]"
			category="com.l1p.interop.scheme.adapter.payment" doc:name="logger" />
        <http:request config-ref="ilp-service-http-config" path="/payIPR" method="POST"
			doc:name="Call ilp-service payment">
			<http:success-status-code-validator values="200..599" />
		</http:request>
		<logger level="INFO"
			message="Respose from ilp-service /payIPR Payload: #[message.payloadAs(java.lang.String)]"
			category="com.l1p.interop.scheme.adapter.payment" doc:name="logger" />
		<object-to-string-transformer doc:name="Object to String" mimeType="application/json" />
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>
	
	<flow name="get:/ilpAddress:scheme-adapter-config">
		<logger level="INFO"
			message="Posting ILP Service request for L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id'] to http://${ilp-host}:${ilp-service.port}/ilpAddress?account=#[message.inboundProperties.'http.query.params'.account], method=GET Payload: #[payload]"
			category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
		<http:request config-ref="ilp-service-http-config" path="/ilpAddress" method="GET"
			doc:name="Call ilp-service ilpAddress">
			<http:request-builder>
				<http:query-param paramName="account"
					value="#[message.inboundProperties.'http.query.params'.account]" />
			</http:request-builder>
			<http:success-status-code-validator values="200..599" />
		</http:request>
		<logger level="INFO"
			message="Respose from ilp-service /ilpAddress Payload: #[message.payloadAs(java.lang.String)]"
			category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
		<object-to-string-transformer doc:name="Object to String" />
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<flow name="post:/notifications:application/json:scheme-adapter-config">
        <http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/notifications" allowedMethods="POST" doc:name="HTTP"/>
        <flow-ref name="common_Flow" doc:name="common_Flow"/>
		<set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload" />
		<set-property propertyName="http.status" value="200"/>
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<sub-flow name="dfsp_quote-and-ilpservice_createIPR">
		<json:json-to-object-transformer doc:name="Convert ILP-Service quoteIPR response to Map"
			returnClass="java.util.HashMap" />
		<set-session-variable variableName="paymentId" value="#[payload.paymentId]"
			doc:name="Save Payment Id" />
		<set-session-variable variableName="payeeLedgerAccount" value="#[payload.payee.account]"
			doc:name="Save Input Receiver URL" />
		<set-session-variable variableName="inputReceiveAmount" value="#[payload.amount.amount]"
			doc:name="Save Input Amount" />
		<set-session-variable variableName="amountType" value="#[payload.amountType]"
			doc:name="Save Input Amount Type" />
		<expression-transformer doc:name="Update transferType before sending to dfsp"
			expression="#[payload.get(&quot;payee&quot;).remove(&quot;url&quot;) ;payload]" />
		<json:object-to-json-transformer doc:name="Object to JSON" />
		<logger level="INFO"
			message="Posting request to Payee: http://${dfsp-host}:${dfsp-api.port}/quotes, method=post Payload: #[payload]"
			category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
        <metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.dfsp-quotes.start" doc:name="SnapTime"/>
		<http:request config-ref="dfsp-api-http-config" path="/quotes" method="POST"
			doc:name="Call dfsp-api /quote">
			<http:request-builder>
				<http:header headerName="Authorization" value="#['Basic ']${dfsp-api.auth_value}" />
			</http:request-builder>
			<http:success-status-code-validator values="200..599" />
		</http:request>
        <metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.dfsp-quotes.stop" doc:name="SnapTime"/>
        <metrics:time config-ref="metricsConfig" beginSnapKey="post.dfsp-quotes.start" endSnapKey="post.dfsp-quotes.stop" category="l1p.scheme-adapter.quotes.api" metricKey="DFSPPostQuote" doc:name="Metrics Record"/>
		<choice doc:name="Check if dfsp-api /quote call is success/failure">
			<when expression="#[message.inboundProperties.'http.status' == 200]">
				<logger level="INFO"
					message="Success Response from Payee dfsp-quote: #[message.payloadAs(java.lang.String)]"
					category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
				<json:json-to-object-transformer returnClass="java.util.Map"
					doc:name="Convert JSON Payload to Map" />
				<set-session-variable variableName="dfspQuoteResponseMap" value="#[payload]"
					doc:name="save-dfsp-quote-response" />
				<set-session-variable variableName="dfspPayeeFee" value="#[payload.payeeFee.amount]"
					doc:name="Save Payee Fee" />
				<set-session-variable variableName="dfspPayeeCommission" value="#[payload.payeeCommission.amount]"
					doc:name="Save Payee Commission" />
				<set-session-variable variableName="expiresAt" value="#[payload.expiresAt]"
					doc:name="Save expiresAt" />
				<!-- Section for calling ilp-service createIPR -->
				<choice doc:name="Check if input amount type is RECEIVE/SEND">
					<when expression="#[sessionVars.amountType == 'RECEIVE']">
						<set-session-variable variableName="destinationAmount"
							value="#[String.valueOf(Integer.parseInt(sessionVars.inputReceiveAmount)+Integer.parseInt(sessionVars.dfspPayeeFee)+Integer.parseInt(sessionVars.dfspPayeeCommission))]"
							doc:name="Calculate total amount the Payee dfsp needs" />
					</when>
					<when expression="#[sessionVars.amountType == 'SEND']">
						<set-session-variable variableName="destinationAmount"
							value="#[String.valueOf(Integer.parseInt(sessionVars.inputReceiveAmount)-Integer.parseInt(sessionVars.dfspPayeeFee)-Integer.parseInt(sessionVars.dfspPayeeCommission))]"
							doc:name="Calculate total amount the Payee dfsp needs" />
					</when>
				</choice>
				<set-session-variable variableName="createIPRRequestMap" value="#[new java.util.HashMap()]"
					doc:name="Instantiate empty createIPR Request" />
				<expression-transformer
					expression="#[sessionVars.createIPRRequestMap.put(&quot;paymentId&quot;,sessionVars.paymentId); sessionVars.createIPRRequestMap.put(&quot;destinationAccount&quot;,sessionVars.payeeLedgerAccount); sessionVars.createIPRRequestMap.put(&quot;destinationAmount&quot;,sessionVars.destinationAmount); sessionVars.createIPRRequestMap.put(&quot;expiresAt&quot;,sessionVars.expiresAt); sessionVars.createIPRRequestMap]"
					doc:name="Populate createIPR Request" />
				<!-- <set-payload value="#[sessionVars.createIPRRequestMap]" doc:name="Set Payload"></set-payload> -->
				<json:object-to-json-transformer doc:name="Object to JSON" />
				<logger level="INFO"
					message="Posting ILP Service request for L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id'] to http://${ilp-host}:${ilp-service.port}/createIPR, method=post Payload: #[payload]"
					category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
                <metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.ilp-service-createIPR.start" doc:name="SnapTime"/>
                <http:request config-ref="ilp-service-http-config" path="/createIPR" method="POST"
					doc:name="Call ilp-service /createIPR">
					<http:success-status-code-validator values="200..599" />
				</http:request>
                <metrics:snap-time config-ref="metricsConfig" snapTimeKey="post.ilp-service-createIPR.stop" doc:name="SnapTime"/>
                <metrics:time config-ref="metricsConfig" beginSnapKey="post.ilp-service-createIPR.start" endSnapKey="post.ilp-service-createIPR.stop" category="l1p.scheme-adapter.quotes.api" metricKey="ILPServiceCreateIPR" doc:name="Metrics Record"/>
                <logger level="INFO"
					message="Response from ilp-service /createIPR: #[message.payloadAs(java.lang.String)] http status: #[message.inboundProperties.'http.status' == 200]"
					category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
				<json:json-to-object-transformer doc:name="Convert ILP-Service Response to Map"
					returnClass="java.util.HashMap" />
				<expression-transformer
					expression="#[sessionVars.dfspQuoteResponseMap.put(&quot;ipr&quot;,payload.ipr); sessionVars.dfspQuoteResponseMap]"
					doc:name="Update dfsp response with createIPR response" />
				<json:object-to-json-transformer doc:name="Object to JSON" />
				<set-property propertyName="http.status" value="#[200]" doc:name="200 Status" />
			</when>
			<otherwise>
				<logger level="INFO"
					message="Failure Response from payee dfsp quote: #[message.payloadAs(java.lang.String)]"
					category="com.l1p.interop.scheme.adapter.quote" doc:name="logger" />
			</otherwise>
		</choice>

	</sub-flow>

	<flow name="post:/invoices:application/json:scheme-adapter-config">
		<http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/invoices" allowedMethods="POST" doc:name="HTTP"/>
		<flow-ref name="common_Flow" doc:name="common_Flow"/>
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="invoice.post.start"
			doc:name="SnapTime" />
		<choice doc:name="Check for initiator PROXY">
			<when expression="#[message.inboundProperties.'initiator'== null]">
				<json:json-to-object-transformer doc:name="Convert incoming payload to Map"
					returnClass="java.util.HashMap" />
				<set-session-variable value="#[payload.get(&quot;submissionUrl&quot;)]"
					variableName="receiverUrl" doc:name="Session Variable"></set-session-variable>
				<set-session-variable value="#[payload.get(&quot;invoiceId&quot;)]"
					variableName="invoiceId" doc:name="Session Variable"></set-session-variable>
				<set-session-variable value="${proxy-host}:${proxy-service.port}${scheme-adapter-service.basePath}/invoices/#[sessionVars.invoiceId]"
					variableName="invoiceUrl" doc:name="Session Variable"></set-session-variable>
				<expression-transformer
					expression="#[payload.put(&quot;invoiceUrl&quot;,sessionVars.invoiceUrl); payload]"
					doc:name="Update invoice request with invoiceUrl" />
				<set-property propertyName="initiator" value="PROXY" doc:name="Property"/>
				<json:object-to-json-transformer doc:name="Convert Map to String" />
				<logger level="INFO"
					message="Sending request to payee scheme-adapter at http://#[sessionVars.receiverUrl]/invoices. Payload: #[payload]"
					category="com.l1p.interop.spsp-backend-invoices" doc:name="logger" />
				<http:outbound-endpoint address="http://#[sessionVars.receiverUrl]/invoices"
					method="POST" exchange-pattern="request-response" doc:name="Generic" />
				<logger level="INFO"
					message="Response for POST /invoices: #[message.payloadAs(java.lang.String)]"
					category="com.l1p.interop.spsp-backend-invoices" doc:name="logger" />
				<set-property propertyName="http.status" value="#[message.inboundProperties.'http.status']"
					doc:name="Property" />
			</when>
			<when expression="#[message.inboundProperties.'initiator'== 'PROXY']">
				<logger level="INFO"
					message="Sending request to dfsp at http://${dfsp-host}:${dfsp-api.port}/invoices Payload:#[payload]"
					category="com.l1p.interop.spsp-backend-invoices" doc:name="logger" />
				<http:request config-ref="dfsp-api-http-config" path="/invoices" method="POST"
					doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="Authorization" value="#['Basic ']${auth_value}" />
					</http:request-builder>
					<http:success-status-code-validator values="200..500" />
				</http:request>

				<logger level="INFO"
					message="Response from dfsp-api /invoices: #[message.payloadAs(java.lang.String)]"
					category="com.l1p.interop.spsp-backend-invoices" doc:name="logger" />
				<set-property propertyName="http.status" value="#[message.inboundProperties.'http.status']"
					doc:name="Property" />
			</when>
		</choice>
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<flow name="get:/invoices/{invoiceId}:scheme-adapter-config">
		<http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/invoices/{invoiceId}" allowedMethods="GET" doc:name="HTTP"/>
		<flow-ref name="common_Flow" doc:name="common_Flow"/>
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="fetch.invoice.get.start"
			doc:name="SnapTime" />
		<set-session-variable variableName="invoiceID"
			value="#[message.inboundProperties.'http.uri.params'.invoiceID]" doc:name="save-uri-parameter" />
		<set-property propertyName="L1p-Trace-Id" value="#[sessionVars.'L1p-Trace-Id']"
			doc:name="PropertyHttpL1p-Trace-Id" />
		<logger level="INFO"
			message="Processing request for get:/invoices/{invoice}, host: ${dfsp-host}, L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id'], invoice=#[sessionVars.invoice]"
			category="com.l1p.interop.spsp-backend-fetch-invoice" doc:name="logger" />
		<http:request config-ref="dfsp-api-http-config" path="$/invoices/#[sessionVars.invoiceID]"
			method="GET" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="Authorization" value="#['Basic ']${auth_value}" />
			</http:request-builder>
			<http:success-status-code-validator values="200..500" />
		</http:request>

		<object-to-string-transformer doc:name="Object to String" />
		<choice doc:name="Update port in account URL if valid">
			<when expression="#[message.inboundProperties.'http.status' == 200]">
				<transformer ref="actualLedgerToLedgerAdapterUrlTransformer" doc:name="Transform Ledger URL" />
			</when>
			<otherwise>
				<logger message="Failed to get account #[payload]" level="ERROR"
					category="com.l1p.interop.spsp-backend-fetch-invoice" doc:name="Logger" />
			</otherwise>
		</choice>
		<json:object-to-json-transformer doc:name="Object to JSON" />

		<logger level="INFO"
			message="Processing complete for get:/receivers/invoices/{invoice}, L1p-Trace-Id=#[sessionVars.'L1p-Trace-Id'], invoice=#[sessionVars.invoice]"
			category="com.l1p.interop.spsp-backend-fetch-invoice" doc:name="logger" />
		<set-property propertyName="http.status" value="#[message.inboundProperties.'http.status']"
			doc:name="Property" />
		<metrics:snap-time config-ref="metricsConfig" snapTimeKey="fetch.invoice.get.stop"
			doc:name="SnapTime" />
		<!--<metrics:time config-ref="metricsConfig" beginSnapKey="fetch.invoice.get.start"-->
			<!--endSnapKey="fetch.invoice.get.stop" category="l1p.spsp-backend.fetch.api" metricKey="FetchInvoiceGetTime"-->
			<!--doc:name="Metrics Record" />-->
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<flow name="get:/invoices:scheme-adapter-config">
		<http:listener config-ref="api-httpListenerConfig" path="${scheme-adapter-service.basePath}/invoices" allowedMethods="GET" doc:name="HTTP"/>
		<flow-ref name="common_Flow" doc:name="common_Flow"/>
		<set-session-variable value="#[message.inboundProperties.'http.query.params'.invoiceUrl]"
			variableName="invoiceUrl" doc:name="Session Variable" />
		<http:outbound-endpoint address="http://#[message.inboundProperties.'http.query.params'.invoiceUrl]"
			method="GET" exchange-pattern="request-response" doc:name="Generic" />
		<exception-strategy ref="interop-catch-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	<catch-exception-strategy name="interop-catch-exception-strategy">
		<set-property propertyName="Content-Type" value="application/json" doc:name="Property - content-type"/>
		<set-property propertyName="http.status" value="501" doc:name="Property - http status"/>
		<set-session-variable variableName="errorMessageId" value="Transformer Messaging Exception" doc:name="set-errorMessageId"/>
		<transformer ref="ExceptionTransformer" doc:name="Exception Transformer"/>
	</catch-exception-strategy>

</mule>
